FOR UART TRANSMIT 
#include <stdint.h>
#include "stm32f1xx.h"

void clockconfig();
void UART2_Tx_Init();
static uint16_t calculate_uart_div(uint32_t periphCLK, uint32_t BaudRate);
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t periphCLK, uint32_t BaudRate);
void uart2_write(int ch );
void delay(volatile uint32_t count);

#define SYS_FREQ 	8000000					//YOU CAN PASS ARGUMENT USING THESE AS WELL BUT FEEL FREE TO CHOOSE
#define APB1_CLK	SYS_FREQ

int main(){


	clockconfig();

	UART2_Tx_Init();


while(1){


		//whatever you want to send.BUT FIRST CONFIGURE according to the data
	uart2_write('H');
	delay(800000);

}

}

void clockconfig(){

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;		//ENABLE CLOCK TO GPIO PORT A
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;    //PA2=TX2 AND PA3=TX3

}
void UART2_Tx_Init(){
	//SETTING PA2 AS ALTERNATE FUNCTION(TX) WITH 50MHZ
	 GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2); // Clear PA2 configuration bits
	 GPIOA->CRL |= (GPIO_CRL_MODE2_0 | GPIO_CRL_MODE2_1); // Set MODE2 bits to 11 (50 MHz output speed)
	 GPIOA->CRL |= (GPIO_CRL_CNF2_1); // Set CNF2 bits to 10 (Alternate function outPUT PUSH PULL)

	 //configure BaudRate
	 uart_set_baudrate(USART2,APB1_CLK,9600); //FEEEL FREE TO CHOOSE BETWEEN 24 - 36 MHz

	 //CONFIGURE THE TRANSFER DIRECTION
	 USART2->CR1 = USART_CR1_TE;			// ENABLING UART2 TRANSMITTER altM (1<<3)
	 /*USART2->CR1 = USART_CR1_M; 			FOR WORDLENGTH AND OTHER..,LET EVERYTHING AS DEFAULT MODE FOR NOW
	 IF YOU WANT SOMETHING EXPLICITELY FEEL FREE TO USE CR2 REG.*/

	 //NOW ENABLE THE UART MODULE
	 USART2->CR1 |= USART_CR1_UE; 			//USART2 IS ENABLED NOW.altM (1<<13)
}

void uart2_write(int ch ){
	// MAKE SURE TRANSMIT DATA REGISTER IS EMPTY
	while(!(USART2->SR & USART_SR_TXE)){		//Bit 7 TXE: Transmit data register empty

	}
	//WRITE TO TRANSMIT DATA REGISTER
	USART2->DR =(ch & 0xFF); 				//because we want to send 8 bit so performing AND operation;
	//USART2->BRR =0x341; put it cause i love this number 143,just put opposite 341 LOL;
}

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t periphCLK, uint32_t BaudRate){
	USART2->BRR = calculate_uart_div(periphCLK,BaudRate);
}
// FORMULA FOR BAUDRATE MAY DIFFER FOR EACH MCU SO PLEASE CHECK THE FORMULA OR ELSE YOU'LL BE WASTING HOURS

static uint16_t calculate_uart_div(uint32_t periphCLK, uint32_t BaudRate) {
    // Calculate the integer part of the UART divider
	//THIS PART IS ALSO KNOWN AS MANTISSA(4TH TO 15TH BIT). IF YOU ONLY USE INTEGER IT WILL NEVER WORK SO
    uint32_t uart_div = periphCLK / (16 * BaudRate);

    // Calculate the fractional part of the UART divider
    //MAKE SURE YOU INCLUDE FRACTIONAL PART  (remainder of the division)(0TH TO 3RD BIT) AS FOR ACCURATE BaudRate CONFIGURATION.
    uint32_t uart_div_fraction = ((periphCLK % (16 * BaudRate)) * 16 + (BaudRate / 2)) / BaudRate;

    // Combine integer and fractional parts into BRR
    return (uart_div << 4) | (uart_div_fraction & 0x0F);
}


/*
 periphCLK % (16 * BaudRate): This calculates the remainder of the division of periphCLK by 16 * BaudRate. This remainder represents the "leftover" part of the clock that isn't covered by the integer division.

((periphCLK % (16 * BaudRate)) * 16): This scales the remainder up by a factor of 16, aligning it with the fractional part of the BRR, which has a 4-bit precision (values 0-15).

+ (BaudRate / 2): This is added to ensure proper rounding. Adding half of the BaudRate to the numerator before the final division helps achieve rounding instead of truncation.

/ BaudRate: Finally, we divide by the BaudRate to get the fractional value that fits within the 4-bit fractional part of the BRR.

*/
void delay(volatile uint32_t count) {
    while(count--) {

    }
}

